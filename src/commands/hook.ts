import fs from "fs";
import path from "path";
import { program as CommanderProgram } from "commander";
import logreport from "../utils/logreport.js";
import enqpkg from "enquirer";
const { prompt } = enqpkg;

export default class hook {
  gitdir = path.join(process.cwd(), ".git");
  githooksdir = path.join(this.gitdir, "hooks");
  gitprepushhookdir = path.join(this.githooksdir, "pre-push");

  MustHaveGitInitialized() {
    const gitdirExists = fs.existsSync(this.gitdir);
    if (!gitdirExists) {
      logreport.warn(
        "git is not initialized in the current directory, cannot hook. run `git init` first."
      );

      return;
    }
  }

  async unhookgit() {
    try {
      this.MustHaveGitInitialized();
      if (!fs.existsSync(this.gitprepushhookdir)) {
        logreport.warn(
          "no `pre-push` hook was found.\n" +
            path.relative(process.cwd(), this.gitprepushhookdir)
        );
        return;
      }
      const e = await prompt<{ confirm_proceed: boolean }>({
        name: "confirm_proceed",
        type: "confirm",
        message:
          "unhook git will remove any `pre-push` script whether or not it was created by lpm. Proceed?\n\n" +
          this.gitprepushhookdir,
      });
      if (e.confirm_proceed === true) {
        fs.rmSync(this.gitprepushhookdir);
        logreport("git unhooked 👍", "log", true);
      }
    } catch (err) {
      logreport.warn("Something went wrong when trying to unhook git " + err);
    }
  }

  async hookgit() {
    try {
      this.MustHaveGitInitialized();
      const existingPrePushHook = fs.existsSync(this.gitprepushhookdir);
      if (existingPrePushHook) {
        logreport.warn(
          "an existing `pre-push` hook was already found.\n" +
            path.relative(process.cwd(), this.gitprepushhookdir)
        );
        return;
      }
      fs.writeFileSync(this.gitprepushhookdir, GIT_PRE_PUSH_SOURCE);
      logreport("git hooked 👍", "log", true);
    } catch (err) {
      logreport.warn("Something went wrong when trying to hook git " + err);
    }
  }

  build(program: typeof CommanderProgram) {
    const hookprogram = program
      .command("hook")
      .description(
        "Setup hooks for git and npm. Hooks help prepare the state of your package so you never publish with locally defined dependencies."
      )
      .action(() => {
        console.log("hook all!");
      });

    hookprogram
      .command("git")
      .description(
        "setup git hooks so you never push to repository with locally defined dependencies."
      )
      .action(() => {
        this.hookgit();
      });

    const unhookprogram = program
      .command("unhook")
      .description("Remove hooks from git and lpm.")
      .action(() => {
        console.log("unhook all!");
      });

    unhookprogram
      .command("git")
      .description("Remove git hooks")
      .action(() => {
        this.unhookgit();
      });
  }
}

//sources
const GIT_PRE_PUSH_SOURCE = `#!/bin/sh

# This hook will prepare lpm when pushing to a remote repository.
# LPM must be initialized on the directory else this hook will fail.

# You can run 'lpm unhook git' then 'lpm hook git' again to update this file.
# Note that unhooking will remove any 'pre-push' hooks, even if it isn't this file...
# ...so you will need to verify the removal.

# Source Generated By LPM (local-package-manager) (https://github.com/mekstuff/lpm)

exec < /dev/tty # We nned to start interactive input stream for enquirer prompts.(https://github.com/SBoudrias/Inquirer.js#using-as-pre-commitgit-hooks-or-scripts)
echo "lpm hook: git pre-push" # Log user
lpm prepare safe-production # Prepare for production

# You can add your custom pre-push script from here...

exit 1
`;
